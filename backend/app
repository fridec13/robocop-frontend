from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import OAuth2PasswordRequestForm
import json
import asyncio
import random
import base64
from datetime import datetime, timedelta
from typing import List, Dict
from sqlalchemy.orm import Session

from database import engine, get_db
from models import Base, User, Robot, SensorData, CameraData
from auth import (
    get_current_user,
    get_current_admin_user,
    create_access_token,
    get_password_hash,
    verify_password,
    ACCESS_TOKEN_EXPIRE_MINUTES
)

# 데이터베이스 테이블 생성
Base.metadata.create_all(bind=engine)

app = FastAPI()

# CORS 설정
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# WebSocket 연결 관리를 위한 클래스
class ConnectionManager:
    def __init__(self):
        self.active_connections: Dict[str, Dict[str, List[WebSocket]]] = {
            "monitoring": {},  # robot_id별 연결 관리
            "camera": {},      # robot_id별 연결 관리
            "sensor": {},      # robot_id별 연결 관리
        }

    async def connect(self, websocket: WebSocket, client_type: str, robot_id: str):
        await websocket.accept()
        if robot_id not in self.active_connections[client_type]:
            self.active_connections[client_type][robot_id] = []
        self.active_connections[client_type][robot_id].append(websocket)

    def disconnect(self, websocket: WebSocket, client_type: str, robot_id: str):
        self.active_connections[client_type][robot_id].remove(websocket)
        if not self.active_connections[client_type][robot_id]:
            del self.active_connections[client_type][robot_id]

    async def broadcast_to_robot(self, message: dict, client_type: str, robot_id: str):
        if robot_id in self.active_connections[client_type]:
            for connection in self.active_connections[client_type][robot_id]:
                await connection.send_json(message)

manager = ConnectionManager()

# 로그인 엔드포인트
@app.post("/token")
async def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    user = db.query(User).filter(User.username == form_data.username).first()
    if not user or not verify_password(form_data.password, user.hashed_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    # 마지막 로그인 시간 업데이트
    user.last_login = datetime.utcnow()
    db.commit()
    
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.username}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

# 관리자용 사용자 생성 엔드포인트
@app.post("/admin/users")
async def create_user(
    username: str,
    email: str,
    password: str,
    is_admin: bool = False,
    current_user: User = Depends(get_current_admin_user),
    db: Session = Depends(get_db)
):
    db_user = db.query(User).filter(User.username == username).first()
    if db_user:
        raise HTTPException(status_code=400, detail="Username already registered")
    
    hashed_password = get_password_hash(password)
    new_user = User(
        username=username,
        email=email,
        hashed_password=hashed_password,
        is_admin=is_admin
    )
    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    return {"message": "User created successfully"}

# 관리자용 사용자 목록 조회
@app.get("/admin/users")
async def get_users(
    current_user: User = Depends(get_current_admin_user),
    db: Session = Depends(get_db)
):
    users = db.query(User).all()
    return users

# 모니터링 데이터 생성 함수
def generate_monitoring_data(robot_id: str):
    return {
        "id": robot_id,
        "status": random.choice(["active", "charging", "idle", "error"]),
        "battery": random.randint(20, 100),
        "location": {
            "x": random.uniform(0, 100),
            "y": random.uniform(0, 100)
        },
        "current_task": random.choice([None, "patrol", "delivery", "cleaning"]),
        "last_updated": datetime.now().isoformat()
    }

# 센서 데이터 생성 함수 (시뮬레이션)
def generate_sensor_data(robot_id: str):
    return {
        "robot_id": robot_id,
        "timestamp": datetime.now().isoformat(),
        "lidar_data": {
            "points": [
                {"x": random.uniform(-10, 10), "y": random.uniform(-10, 10)}
                for _ in range(360)
            ]
        },
        "imu_data": {
            "acceleration": {
                "x": random.uniform(-1, 1),
                "y": random.uniform(-1, 1),
                "z": random.uniform(-1, 1)
            },
            "gyro": {
                "x": random.uniform(-1, 1),
                "y": random.uniform(-1, 1),
                "z": random.uniform(-1, 1)
            }
        },
        "position": {
            "x": random.uniform(0, 100),
            "y": random.uniform(0, 100),
            "orientation": random.uniform(0, 360)
        }
    }

# WebSocket 엔드포인트 - 모니터링
@app.websocket("/ws/monitoring/{robot_id}")
async def websocket_monitoring(
    websocket: WebSocket,
    robot_id: str,
    token: str
):
    try:
        # 토큰 검증 로직 추가 필요
        await manager.connect(websocket, "monitoring", robot_id)
        while True:
            data = generate_monitoring_data(robot_id)
            await websocket.send_json(data)
            await asyncio.sleep(1)
    except WebSocketDisconnect:
        manager.disconnect(websocket, "monitoring", robot_id)

# WebSocket 엔드포인트 - 센서 데이터
@app.websocket("/ws/sensor/{robot_id}")
async def websocket_sensor(
    websocket: WebSocket,
    robot_id: str,
    token: str
):
    try:
        await manager.connect(websocket, "sensor", robot_id)
        while True:
            data = generate_sensor_data(robot_id)
            await websocket.send_json(data)
            await asyncio.sleep(0.1)  # 10Hz로 센서 데이터 전송
    except WebSocketDisconnect:
        manager.disconnect(websocket, "sensor", robot_id)

# WebSocket 엔드포인트 - 카메라 스트림
@app.websocket("/ws/camera/{robot_id}")
async def websocket_camera(
    websocket: WebSocket,
    robot_id: str,
    token: str
):
    try:
        await manager.connect(websocket, "camera", robot_id)
        frame_number = 0
        while True:
            # 실제 구현에서는 로봇의 카메라에서 이미지를 가져와야 함
            # 여기서는 더미 데이터로 대체
            camera_data = {
                "robot_id": robot_id,
                "frame_number": frame_number,
                "timestamp": datetime.now().isoformat(),
                "image_data": "base64_encoded_image_data"  # 실제 이미지 데이터로 대체 필요
            }
            await websocket.send_json(camera_data)
            frame_number += 1
            await asyncio.sleep(0.033)  # 약 30fps
    except WebSocketDisconnect:
        manager.disconnect(websocket, "camera", robot_id)

# REST API 엔드포인트 - 로봇 목록
@app.get("/api/robots")
async def get_robots(current_user: User = Depends(get_current_user)):
    return [generate_monitoring_data(f"ROBOT_{i:03d}") for i in range(1, 6)]

# 관리자용 로봇 관리 엔드포인트
@app.post("/admin/robots")
async def create_robot(
    robot_id: str,
    name: str,
    current_user: User = Depends(get_current_admin_user),
    db: Session = Depends(get_db)
):
    db_robot = Robot(
        id=robot_id,
        name=name,
        status="idle",
        battery_level=100
    )
    db.add(db_robot)
    db.commit()
    db.refresh(db_robot)
    return db_robot

# 서버 시작
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8080) 